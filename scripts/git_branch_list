#!/usr/bin/env python3
"""Pretty print the output of 'git branch'."""

from __future__ import annotations

import argparse
import os
import shutil
import subprocess
import sys
from dataclasses import dataclass


@dataclass
class Args:
    no_crop: bool
    all: bool


class Format:
    RESET = "\u001b[0m"
    COLORS = {
        "black": "\u001b[30m",
        "red": "\u001b[31m",
        "green": "\u001b[32m",
        "yellow": "\u001b[33m",
        "blue": "\u001b[34m",
        "magenta": "\u001b[35m",
        "cyan": "\u001b[36m",
        "white": "\u001b[37m",
    }


COLUMN_COLORS = [
    Format.COLORS["magenta"],
    Format.COLORS["yellow"],
    Format.COLORS["white"],
    Format.COLORS["cyan"],
    Format.COLORS["green"],
]
DELIM = "|"
FORMAT_COLS = [
    "%(authordate:short)",
    "%(objectname:short)",
    "%(refname:short)",
    "%(committername)",
    "(%(authordate:relative))",
]


def main(argv: list[str]) -> int:
    args = parse_args(argv)
    branches = get_branches(show_all=args.all)
    rows = [branch.split(DELIM) for branch in branches]
    out = tabulate_rows(rows, args.no_crop)
    enable_term_colours()
    print(out, end="")
    return 0


def parse_args(argv: list[str]) -> Args:
    parser = argparse.ArgumentParser(
        description=__doc__ or "",
        prog="git_branch_list",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "-n",
        "--no-crop",
        action="store_true",
        default=False,
        help="do not crop the branch name based on terminal size",
    )
    parser.add_argument(
        "-a",
        "--all",
        action="store_true",
        default=False,
        help="list both remote-tracking and local branches",
    )
    return Args(**vars(parser.parse_args(argv)))


def add_color(s: str, fmt: str) -> str:
    return f"{fmt}{s}{Format.RESET}"


def get_branches(show_all: bool) -> list[str]:
    command = [
        "git",
        "branch",
        "--sort=-authordate:iso8601",
        "--format=" + DELIM.join(FORMAT_COLS),
    ]
    if show_all:
        command.append("--all")
    try:
        raw_branches = subprocess.check_output(command).decode()
    except subprocess.CalledProcessError as e:
        print(f"git_branch_list: failed to run git: {e}", file=sys.stderr)
        sys.exit(1)
    return [b.strip() for b in raw_branches.splitlines() if b.strip()]


def get_column_widths_no_crop(rows: list[list[str]], num_cols: int) -> list[int]:
    return [max(len(row[col_num]) for row in rows) for col_num in range(num_cols)]


def get_column_widths(rows: list[list[str]], num_cols: int) -> list[int]:
    col_widths = get_column_widths_no_crop(rows, num_cols)
    term_width = shutil.get_terminal_size(fallback=(100, 20)).columns
    total_with_spaces = sum(col_widths) + num_cols  # Add padding space per column
    if total_with_spaces > term_width:
        # Reduce refname column (index 2) to fit
        excess = total_with_spaces - term_width
        col_widths[2] = max(5, col_widths[2] - excess)
    return col_widths


def tabulate_rows(rows: list[list[str]], no_crop: bool) -> str:
    if not rows:
        return ""

    num_cols = len(rows[0])
    col_widths = (
        get_column_widths_no_crop(rows, num_cols)
        if no_crop
        else get_column_widths(rows, num_cols)
    )

    lines = []
    for row in rows:
        line_parts = []
        for col_num, width in enumerate(col_widths):
            item = row[col_num]
            if len(item) > width:
                item = item[: width - 4] + "..."
            item = item.ljust(width + 1)
            line_parts.append(add_color(item, COLUMN_COLORS[col_num]))
        lines.append("".join(line_parts))
    return "\n".join(lines) + "\n"


def enable_term_colours() -> None:
    if os.name == "nt":
        # Enable ANSI colours on Windows
        os.system("color")


if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv[1:]))
    except Exception as exc:
        print(f"git_branch_list: error: {exc}", file=sys.stderr)
        sys.exit(1)
