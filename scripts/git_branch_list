#!/usr/bin/env python3
"""
Pretty print the output of 'git branch'.
"""

from __future__ import annotations

import argparse
import os
import subprocess
import sys
from dataclasses import dataclass


@dataclass
class Args:
    no_crop: bool
    all: bool


class Format:
    BLACK = "\u001b[30m"
    BLUE = "\u001b[34m"
    CYAN = "\u001b[36m"
    GREEN = "\u001b[32m"
    MAGENTA = "\u001b[35m"
    RED = "\u001b[31m"
    RESET = "\u001b[0m"
    WHITE = "\u001b[37m"
    YELLOW = "\u001b[33m"


COLUMN_COLORS = [
    Format.MAGENTA,
    Format.YELLOW,
    Format.WHITE,
    Format.CYAN,
    Format.GREEN,
]
DELIM = "|"
FORMAT_COLS = [
    "%(authordate:short)",
    "%(objectname:short)",
    "%(refname:short)",
    "%(committername)",
    "(%(authordate:relative))",
]


def main(argv: list[str]) -> int:
    args = parse_args(argv)
    branches = get_branches(show_all=args.all)
    rows = [branch.split(DELIM) for branch in branches]
    out = tabulate_rows(rows, args.no_crop)
    enable_term_colours()
    print(out, end="")
    return 0


def parse_args(argv: list[str]) -> Args:
    parser = argparse.ArgumentParser(
        description=__doc__,
        prog="git_branch_list",
        formatter_class=argparse.RawDescriptionHelpFormatter,
    )
    parser.add_argument(
        "-n",
        "--no-crop",
        action="store_true",
        default=False,
        help="do not crop the branch name based on terminal size",
    )
    parser.add_argument(
        "-a",
        "--all",
        action="store_true",
        default=False,
        help="list both remote-tracking and local branches",
    )
    return Args(**vars(parser.parse_args(argv)))


def add_color(s: str, fmt: str) -> str:
    return f"{fmt}{s}{Format.RESET}"


def get_branches(show_all: bool) -> list[str]:
    command = [
        "git",
        "branch",
        "--sort=-authordate:iso8601",
        "--format=" + DELIM.join(FORMAT_COLS),
    ]
    if show_all:
        command.append("--all")
    try:
        raw_branches = subprocess.check_output(command).decode()
    except subprocess.CalledProcessError:
        sys.exit(1)
    return [b.strip() for b in raw_branches.split("\n") if b.strip()]


def get_column_widths(rows: list[list[str]], num_cols: int) -> list[int]:
    col_widths = get_column_widths_no_crop(rows, num_cols)
    term_size = get_terminal_column_count()
    if sum(col_widths) + num_cols > term_size:
        col_widths[2] += term_size - sum(col_widths) - num_cols
    return col_widths


def get_column_widths_no_crop(rows: list[list[str]], num_cols: int) -> list[int]:
    col_widths = []
    for col_num in range(num_cols):
        col_widths.append(max([len(row[col_num]) for row in rows]))
    return col_widths


def get_terminal_column_count() -> int:
    try:
        return os.get_terminal_size().columns
    except Exception:  # noqa: E722
        return 100


def tabulate_rows(rows: list[list[str]], no_crop: bool) -> str:
    n_cols = len(rows[0])
    if no_crop:
        col_widths = get_column_widths_no_crop(rows, n_cols)
    else:
        col_widths = get_column_widths(rows, n_cols)

    out = ""
    for row in rows:
        for col_num, col in enumerate(col_widths):
            item = row[col_num]
            if len(item) > col:
                item = item[: col - 4] + "..."
            item = item.ljust(col + 1)
            out += add_color(item, COLUMN_COLORS[col_num])
        out += "\n"
    return out


def enable_term_colours() -> None:
    if os.name == "nt":
        # Enable ANSI colours on Windows
        os.system("color")


if __name__ == "__main__":
    try:
        sys.exit(main(sys.argv[1:]))
    except Exception as exc:
        print(f"git_branch_list: error: {exc}", file=sys.stderr)
        sys.exit(1)
